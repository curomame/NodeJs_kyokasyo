2.1 ES2015+

2.1.1 const, let

2.1.2 템플릿 문자열
백틱 `${variable}` 형식으로 사용 가능

2.1.3 객체 리터럴
{name : name, age:age} => {name, age}
객체 속성명 동적 생성 가능
[es+6] : 'Fantastic'

2.1.4 화살표 함수
function add1(x,y){return x+y};
const add2 = (x,y) => {return x+y};
const add3 =(x,y) => x+y;
const add4 =(x,y) => (x+y);

this가 바인딩 되어 상위 스코프의 this를 그대로 사용할 수 있음

2.1.5 구조 분해 할당

const arr = ['nodejs',{},10,true];
const [node,obj, ,bool] = array;

this가 달라질 수 있으니 주의

2.1.6 클래스

class Example{}

class Name extends  Example{}

const Names = new Name()

=> 하지만 프로토타입임

2.1.7 프로미스

const temp =true; // resolve : reject
const promise = new Promise ((res,rej) => {
if(true){res()} else {rej()}

promise.then((mesage) => {}) res 일때 실행
.catch((err) => {}) => rej 일때 실행
.finally(() => {}) => 무조건 실행

프로미스 안에서도 다시 프로미스를 리턴하거나 리젝할수 있음

const promise1 = Promise.resolve('success1');
const promise2 = Promise.resolve('success2');

Promise.all([promise1, promise2])
.then((result)) => {})
.catch((err)  => {})
형태도 가능
하나라도 rej일시 바로 catch로 넘어감

2.1.8 async/await
비동기 위주 프로그래밍
try catch로 에러처리

2.2 프런트엔드 자바스크립트

2.2.1 AJAX
비동기적 웹 서비스 개발시 사용하는 기법
보통 AJAX 요청은 제이쿼리나 axios 같은 라이브러리를 이용해 보냄

axios.get('url')
.then((result)=>{
log(result.data))
.catch((err) => {})

 axios.get 내부에 new Promise가 들어가 있으므로 then catch 사용 가능
post방식도 비슷한데 post 방식은 인수로 data 넣어서 보내면 끝!

2.2.2 FormData
const formData = new FormData();
formData.append('name','lee')
formData.has('item');
formData.get('item'); => val값 반환
formData.getAll('item'); => 모든 val값 배열로 반환

delete=>현재 키 제거
set=>현재 키 수정

2.2.3 encodeURIComponent, decodeURIComponent
한글 주소를 이해할 수 있도록
한글 주소 부분만 이 매서드를 활용해서 감싸면 됨
url: "www.naver.com/${encodeURIComponent('여름')}"

받는쪽에서는 decode로 받기

2.2.4 데이터 속성과 dataset

보안이 되어야할 데이터에서 생각해볼 내용
자바 스크립트로 쉽게 접근 가능


