1.1 핵심 개념 이해하기

Nodejs는 Chrome V8 Javascript 엔진으로 빌드 된 Javascript 런타임이다.

1.1.1 서버

노드를 통해 다양한 js app을 실행할 수 있지만, 서버 애플리케이션 실행하는데 가장 많이 사용됨

서버 - 네트워크를 통해 클라이언트에 정보나 서비스를 제공하는 컴퓨터 또는 프로그램
클라이언트 - 요청을 보내는 주체로, 브라우저, 데스크탑, 모바일웹, 또는 서버(서버도 다른 서버에 요청 가능) 일수 있음

왜 이 노드를 이용해서 서버를 만드는지는, 자바스크립트의 속성과 관련있음.

1.1.2 자바스크립트 런타임

런타임 - 특정 언어로 만든 프로그램을 실행할 수 있는 환경
노드는 자바스크립트 실행기라고 봐도 무방

노드는 V8과 더불어 libuv라는 라이브러리를 사용하는데,
V8과 libuv는 C와 C++로 구현되어 있음.

libuv 라이브러리는 노드의 특성인 이벤트 기반, 논 블로킹 I/O모델을 구현.

1.1.3 이벤트 기반

이벤트 기반이란 이벤트가 발생할 때 미리 지정해둔 작업을 수행하는 방식을 일컫음
이벤트로는 클릭, 네트워크 요청같은게 있음.

이벤트 기반 시스템 - 특정 이벤트 발생 시 무엇을 할지 미리 등록해둬야함.
이를 이벤트리스너에 콜백 함수를 등록한다고 함

노드도 이벤트 기반 방식으로 동작하기 때문에, 이벤트 발생하면 이벤트 리스너에 등록해둔 콜백함수 호출
발생한 이벤트 없거나, 발생했던 이벤트 다 처리하면, 노드는 다음 이벤트 발생할때까지 대기

1)이벤트 리스너 콜백 함수 등록
2)이벤트 발생
3)등록된 콜백 함수 호출
4)시스템 대기

이벤트 기반 모델에서는 이벤트 루프라는 개념이 등장.
여러 이벤트가 동시에 발생시 어떤 순서로 콜백 함수를 호출할지를 이벤트 루프가 판단.

노드는 자바스크립트의 코드의 맨 위에서부터 한 줄씩 실행.
함수 호출 부분 발견시 호출을 스택에 넣음
자바스크립트는 코드 실행 시, 기본적으로 전역 컨텍스트에서 돌아간다고 생각하면 좋음.

SetTimeOut 콜백

이벤트 루프 - 이벤트 발생 시 호출할 콜백 함수 관리, 호출된 콜백 함수 실행순서 결정, 노드 종료될때까지 이벤트 처리 위한 작업 반복
백 그라운드 - settimeout같은 타이머나 이벤트 리스너들이 대기하는 곳, 자바스크립트가 아닌 다른 언어로 작성된 프로그램이며, 여러 작업이 동시에 실행될 수 있음
태스크 큐 - 이벤트 발생 후, 백그라운드에서는 태스크 큐로 타이머나 이벤트 리스너의 콜백 함수를 보냄. 정해진 순서대로 콜백들이 줄 서있으며, 콜백 큐라고도 부름, 콜백들은 보통 완료된 순서대로 줄 서있지만, 특정한 경우 순서가 바뀌기도 함.

[호출스택]
1.호출 스택에 쌓임
4.호출 스택 실행이 끝나 비워지면
6.run이 호출 스택에서 실행되고 비워짐
[백그라운드]
2.settimeout 실행 시 콜백 Run은 백그라운드로 보냄
[테스크큐]
3.백그라운드에서 n초 후 태스크 큐로 보냄
5.이벤트 루프가 태스크 큐의 콜백을 호출 스택으로 올림
7.이벤트 루프는 태스크 큐에 콜백이 들어올 때까지 대기

만약 호출스택에 스택이 많으면 n초후에 실행이 되지 않을 수도 있음
그래서 항상 settimeout이 일정하지 않을수도있음

1.1.4 논 블로킹 I/O
이벤트 루프를 잘 활용하면 오래 걸리는 작업 효율적 처리 가능
작업에는 동시실행 가능한 작업과, 동시실행 불가능한 작업 두가지로 나뉨
js는 기본적으로 동시 실행될수 없는 코드이지만,
i/o작업 같은 것은 동시 처리 가능할수도 있음.

i = input
o = output
파일 시스템 접근(파일 읽기, 파일 쓰기, 폴더 만들기 등), 네트워크 요청 작업 같은것들이 I/O의 일종
이러한 작업할 때, 노드는 논 블로킹 방식으로 처리하는 방법 제공

논 블로킹 - 이전 작업 완료될 때까지 대기하지 않고 다음작업 수행
블로킹 - 이전 작업이 끝나야만 다음 작업 수행

근데 이게 그냥 제공되는게 아니라, 이렇게 되게끔 코딩을 해야 논 블로킹으로 코딩해야함.

논 블로킹과 동시는 같은 의미가 아님

1.1.5 싱글 스레드

자바스크립트가 동시에 실행될 수 없는 이유

프로세스 - os에서 할당하는 작업의 단위, 노드나 웹 브라우저 같은 프로그램은 개별 프로세스, 프로세스간 메모리등의 자원 공유 x
스레드 - 프로세스 내에서 실행되는 흐름의 단위. 프로레스는 스레드를 여러개 생성해 작업을 동시 처리 가능
		스레드들은 부모 프로세스의 자원 공유, 같은 주소의 메모리에 접근 가능해 데이터 공유도 가능.

노드는 싱글스레드라고 하지만 실은 아님
노드를 실행하면 먼저 프로세스 하나 실행
그 프로세스에서 스레드들을 생성하는데, 이때 내부적으로 스레드 여러개 생성
그 중 직접 제어할 수 있는 스레드가 하나 뿐임
그래서 싱글스레드라고 함

스레드 = 일손

멀티 스레딩
하나의 프로레스 안에서 여러개 스레드 사용 가능
cpu 작업이 많을 때 사용
프로그래밍 어려움

멀티 프로세싱
여러개 프로세스 사용
io요청이 많을 경우 사용
프로그래밍 비교적 쉬움

1.2 서버로서의 노드

노드 서버의 장단점은 싱글 스레드, 논블로킹 모델의 장단점과 크게 다르지 않음.
싱글 스레드기 때문에 멈추지 않고 서버가 잘 돌아갈수 있도록 해야함.
cpu 많이 쓰는 작업 안대영

노드에는 웹 서버 내장되어있음

장점
멀티 스레드 방식에 비해 적은 컴퓨터 자원 사용
io 작업이 많은 서버로 적합
멀티 스레드 방식보다 쉬움
웹 서버가 내장되어 있음
자바스크립트를 사용
json 형식과 쉽게 호환

단점
기본적으로 싱글 스레드라 cpu 코어 하나만 사용
cpu 작업이 많은 서버로는 부적합
하나뿐인 스레드가 멈추지 않도록 관리 필요
서버 규모 커지면 관리 어려움
어중간한 성능

1.3 서버 외의 노드
처음에는 노드가 서버로만 사용되다가 앵귤러, 리액트, 뷰등 다양한 웹 프레임 워크까지 사용됨
